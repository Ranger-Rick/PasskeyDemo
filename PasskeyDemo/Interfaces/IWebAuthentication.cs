using Fido2NetLib;
using Fido2NetLib.Objects;
using PasskeyDemo.Models;
using PasskeyDemo.Models.DTO;

namespace PasskeyDemo.Interfaces;

public interface IWebAuthentication
{
    /// <summary>
    /// Gets the options that will be used by the client to create a new PublicKeyCredential.
    /// This is the first call that needs to be made in the WebAuthn flow. Clients need to communicate with the RP (server)
    /// and agree on a set of rules to create a new PublicKeyCredential. Implementors of this contract should call the
    /// Fido2 <c>RequestNewCredential</c> method. 
    /// </summary>
    /// <remarks>
    /// RequestNewCredential creates a <c>challenge</c> that the client will solve. Once the challenge is solved, a
    /// new Public Key is created that is shared with the server.
    /// </remarks>
    /// <param name="user">
    /// A <c>Fido2User</c> that will be used to create the Credential Options.
    /// </param>
    /// <returns>Options that will be returned to the client to create a new PublicKeyCredential</returns>
    Task<CredentialCreateOptions> GetCredentialOptions(Fido2User user);

    /// <summary>
    /// Accepts a Authenticator Attestation Response that has been generated by the client and creates a new PublicKeyCredential.
    /// This is the second call that needs to be made in the WebAuthn flow. Implementors of this contract should call the
    /// Fido2 <c>MakeNewCredentialAsync</c> method.
    /// </summary>
    /// <param name="attestationResponse">
    /// After clients call the <c>navigator.credentials.create()</c> method, a PublicKeyCredential is created. This key is
    /// returned to the server so the server can verify the key. This Authenticator Attestation is part of that key.
    /// </param>
    /// <param name="options">
    /// The original options returned from the <c>Fido2.RequestNewCredential</c> method
    /// </param>
    /// <returns>
    /// The result of the <c>Fido2.MakeCredential()</c> call. This object is the Public Key that will be attached to a user
    /// and used to authenticate them in the future.
    /// </returns>
    Task<Fido2.CredentialMakeResult> MakeCredential(AuthenticatorAttestationRawResponse attestationResponse, CredentialCreateOptions options);

    /// <summary>
    /// When a user wants to authenticate with WebAuthn, the client and the server need to communicate and agree on how to
    /// assert that the user holds the private key.
    /// This method calls the <c>Fido2.GetAssertionOptions()</c> method. This method generates a new challenge that only
    /// the user (who holds the private key) can solve.
    /// </summary>
    /// <param name="user">The user for which to get Assertion Options</param>
    /// <returns>
    /// Options that outline how the client should assert that the user holds the private key that was used to create the
    /// PublicKeyCredential during the registration process
    /// </returns>
    Task<AssertionOptions> GetAssertionOptions(User user);

    /// <summary>
    /// Asserts that the user was able to solve the challenge. If the user was able to solve the challenge, then the user
    /// must own the private key, and can be allowed to proceed.
    /// </summary>
    /// <param name="credentialId">
    /// The unique identifier for the credential that is being asserted. Credentials should only be associated with a single user
    /// </param>
    /// <param name="assertionResponse">
    /// The assertion response from the user/client. If this response correctly solves the challenge posed by the
    /// Assertion Options, the user must hold the private key and can be allowed to proceed.
    /// </param>
    /// <param name="assertionOptions">The original options returned from the <c>Fido2.GetAssertionOptions</c> method</param>
    /// <returns>A result which denotes if the user has been successfully verified or not</returns>
    Task<AssertionVerificationResult> MakeAssertion(byte[] credentialId, AuthenticatorAssertionRawResponse assertionResponse, AssertionOptions assertionOptions);

}